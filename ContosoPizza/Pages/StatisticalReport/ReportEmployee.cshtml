@page
@model ContosoPizza.Pages.StatisticalReport.ReportEmployeeModel
@{
    ViewData["Title"] = "Report Employees";
    int count = 0;
    string[] colors = { "red", "blue", "green" };
}

<h1>Report Employees</h1>

<form>
    <p>
        Filter Date:
        From: <input name="FromDate" type="date" asp-for="FromDate" value="" />
        &nbsp;&nbsp;&nbsp;&nbsp;
        To: <input name="ToDate" type="date" asp-for="ToDate" value="" />
        <input type="submit" class="btn btn-primary" value="Search" />
    </p>
    <p>
        Order by:
        <select id="orderBySelect">
            <option value="">Default</option>
            <option value="OrderByTotalMoneyOrders">Total Money</option>
            <option value="OrderByDoneOrders">Done Orders</option>
            <option value="OrderByFailedOrders">Failed Orders</option>
            <option value="OrderBySuccessfullMoneyOrders">Successfull Orders (Money)</option>
            <option value="OrderByDiscrepancy">Discrepancy (between Successfull Orders and Total Money)</option>
        </select>
    </p>
</form>

<table class="table">
    <thead> 
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].FullName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].Role)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].DoneOrders)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].FailedOrders)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].TotalMoneyOrders)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].SuccessfullMoneyOrders)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].Discrepancy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.reportEmployeeDtos[0].Image)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.reportEmployeeDtos)
        {
            @if (count <= 2)
            {
                <tr style="color: @colors[count % colors.Length]; font-weight: bold;">
                    <td>
                        <a style="color: @colors[count % colors.Length]; font-weight: bold;" href="/Employees/Details?Id=@item.Id">@Html.DisplayFor(modelItem => item.FullName)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Role)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DoneOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FailedOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalMoneyOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SuccessfullMoneyOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Discrepancy)
                    </td>                 
                    <td>
                        <img src="@item.Image" alt="Image" style="max-width: 200px; max-height: 200px;" />
                    </td>
                    <td></td>
                </tr>
            }else
            {
                <tr>
                    <td>
                        <a href="/Employees/Details?Id=@item.Id">@Html.DisplayFor(modelItem => item.FullName)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Role)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DoneOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FailedOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalMoneyOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SuccessfullMoneyOrders)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Discrepancy)
                    </td>
                    <td></td>
                </tr>
            }
            count++;
        }
    </tbody>
</table>

<script> 

    document.addEventListener('DOMContentLoaded', function () {
        const searchButton = document.querySelector('input[type="submit"]');
        let savedFromDate = localStorage.getItem('fromDate_EmployeeReport') || ''; // Lấy giá trị fromDate đã được lưu trữ từ trước (nếu có)
        let savedToDate = localStorage.getItem('toDate_EmployeeReport') || ''; // Lấy giá trị toDate đã được lưu trữ từ trước (nếu có)
        document.querySelector('input[name="FromDate"]').value = savedFromDate;
        document.querySelector('input[name="ToDate"]').value = savedToDate;
        searchButton.addEventListener('click', redirectToSelectedOption);

        // Khôi phục giá trị đã lưu nếu có
        var storedOrderByValue = localStorage.getItem('selectedOrderByOption');
        if (storedOrderByValue) {
            document.getElementById('orderBySelect').value = storedOrderByValue;
        }

        document.getElementById('orderBySelect').addEventListener('change', function (event) {
            redirectToSelectedOption();
        });

        function redirectToSelectedOption() {
            const baseUrl = window.location.href.split('?')[0];
            var selectElement = document.getElementById("orderBySelect");
            var selectedValue = selectElement.value;
            const queryParams = [];
            const fromDate = document.querySelector('input[name="FromDate"]').value;
            const toDate = document.querySelector('input[name="ToDate"]').value;

            // Lưu trữ giá trị đã chọn vào localStorage       
            if(selectedValue){
                queryParams.push(`OrderBy=${selectedValue}`);
                localStorage.setItem('selectedOrderByOption', selectedValue);
            }else{
                localStorage.removeItem('selectedOrderByOption');
            }

            if (fromDate) {
                queryParams.push(`fromdate=${fromDate}`);
                savedFromDate = fromDate; // Lưu giá trị fromDate hiện tại
                localStorage.setItem('fromDate_EmployeeReport', fromDate); // Lưu giá trị fromDate vào localStorage
            } else {
                savedFromDate = ''; // Reset giá trị fromDate nếu không có giá trị
                localStorage.removeItem('fromDate_EmployeeReport'); // Xóa giá trị fromDate từ localStorage
            }

            if (toDate) {
                queryParams.push(`todate=${toDate}`);
                savedToDate = toDate; // Lưu giá trị toDate hiện tại
                localStorage.setItem('toDate_EmployeeReport', toDate); // Lưu giá trị toDate vào localStorage
            } else {
                savedToDate = ''; // Reset giá trị toDate nếu không có giá trị
                localStorage.removeItem('toDate_EmployeeReport'); // Xóa giá trị toDate từ localStorage
            }

            const queryString = queryParams.join('&');
            const newUrl = `${baseUrl}?${queryString}`;

            // Chuyển hướng đến đường dẫn đã chọn
            if (selectedValue !== "") {
                window.location.href = newUrl;
            }
        }
    });
</script>


