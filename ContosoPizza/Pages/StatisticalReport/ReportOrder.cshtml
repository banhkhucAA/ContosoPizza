@page
@model ContosoPizza.Pages.StatisticalReport.ReportOrderModel
@{
    ViewData["Title"] = "Report Orders";
    
}

<h1 class="text-center">Report Orders</h1>

<form class="text-center">
    <p>
        Order By Price:
        <select id="orderByOrderInfo">
            <option value="">Default</option>
            <option value="OrderByBillPrice">Bill Price</option>
            <option value="OrderByDiscountAmount">Discount Amount</option>
        </select>

        Filter Date:
        From: <input name="FromDate" type="date" asp-for="FromDate" value="" />
        &nbsp;&nbsp;&nbsp;&nbsp;
        To: <input name="ToDate" type="date" asp-for="ToDate" value="" />
        <input type="submit" class="btn btn-primary" value="Search" />
    </p>
</form>

<h2 class="text-center">Summary of Orders</h2>
<div class="column">
        <div class="text-center">Total orders: @Model.TotalOrders</div>
        <div class="text-center">Total money from orders: @Model.TotalMoneyOrders $</div>
        <div class="col-md-12">
            <table class="table-bordered mx-auto" style="max-width:80%">
                <thead>
                    <tr>
                        <th class="col-md-3 text-center">#</th>
                        <th class="col-md-3 text-center">Succesfull Orders</th>
                        <th class="col-md-3 text-center">Cancelled/ Failed/ Deactive Orders</th>
                        <th class="col-md-3 text-center">Unfinished Orders</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th class="col-md-3 text-center">Quantities</th>
                        <th class="col-md-3 text-center">@Model.TotalSuccessOrders</th>
                        <th class="col-md-3 text-center">@Model.TotalFailedOrders</th>
                        <th class="col-md-3 text-center">@Model.UnfinishedOrders</th>
                    </tr>
                    <tr>
                        <th class="col-md-3 text-center">Money</th>
                        <th class="col-md-3 text-center">@Model.SuccesfullOrdersMoney $</th>
                        <th class="col-md-3 text-center">@Model.FailedOrdersMoney $</th>
                        <th class="col-md-3 text-center">@Model.UnfinishedMoney $</th>
                    </tr>
                    <tr>
                        <th class="col-md-3 text-center">Deliveries</th>
                        <th class="col-md-3 text-center">@Model.DeliveredSuccessfullyOrders</th>
                        <th class="col-md-3 text-center">@Model.DeliveredCanceled_FailedOrders</th>
                        <th class="col-md-3 text-center">@Model.UnfinishedOrdersDeliveries </th>
                    </tr>            
                </tbody>
            </table>
    </div>
</div>

<br />
<br />

<h2 class="text-center">Orders' Details</h2>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ReportOrderDtos[0].Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReportOrderDtos[0].OrderPlacedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReportOrderDtos[0].OrderFullfilledAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReportOrderDtos[0].PriceOrder)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReportOrderDtos[0].DiscountAmount)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ReportOrderDtos)
        {
                <tr>
                    <td>
                        <a href="/OrderDetails/Create?orderId=@item.Id">@Html.DisplayFor(modelItem => item.Id)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderPlacedAt)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderFullfilledAt)
                        @Html.DisplayFor(modelItem => item.OrderFullfilledAt)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PriceOrder)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DiscountAmount)
                    </td>
                    <td></td>
                </tr>
        }
    </tbody>
</table>
<div class="text-center">
    Page: <input type="number" id="pageInput" style="color:black; font-weight:bold; font-size: 30px; max-width: 50px" value="1" min="1" step="1">
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const orderBySelect = document.getElementById('orderByOrderInfo');
        const pageInput = document.getElementById('pageInput');
        const searchButton = document.querySelector('input[type="submit"]');
        let savedOrderBy = localStorage.getItem('orderBy') || ''; // Lấy giá trị orderBy đã được lưu trữ từ trước (nếu có)
        let savedPage = localStorage.getItem('page') || ''; // Lấy giá trị page đã được lưu trữ từ trước (nếu có)
        let savedFromDate = localStorage.getItem('fromDate') || ''; // Lấy giá trị fromDate đã được lưu trữ từ trước (nếu có)
        let savedToDate = localStorage.getItem('toDate') || ''; // Lấy giá trị toDate đã được lưu trữ từ trước (nếu có)

        // Đặt giá trị ban đầu cho select và input từ giá trị đã lưu trữ
        orderBySelect.value = savedOrderBy;
        pageInput.value = savedPage;
        document.querySelector('input[name="FromDate"]').value = savedFromDate;
        document.querySelector('input[name="ToDate"]').value = savedToDate;

        orderBySelect.addEventListener('change', navigateToUrl);
        pageInput.addEventListener('input', navigateToUrl);
        searchButton.addEventListener('click', navigateToUrl);

        function navigateToUrl(event) {
            event.preventDefault(); // Ngăn chặn hành vi mặc định của button (tải lại trang)

            const orderBy = orderBySelect.value;
            const page = pageInput.value;
            const fromDate = document.querySelector('input[name="FromDate"]').value;
            const toDate = document.querySelector('input[name="ToDate"]').value;
            const baseUrl = window.location.href.split('?')[0]; // Lấy đường dẫn gốc của trang
            const queryParams = [];

            if (orderBy) {
                queryParams.push(`orderBy=${orderBy}`);
                savedOrderBy = orderBy; // Lưu giá trị orderBy hiện tại
                localStorage.setItem('orderBy', orderBy); // Lưu giá trị orderBy vào localStorage
            } else {
                savedOrderBy = ''; // Reset giá trị orderBy nếu không có lựa chọn
                localStorage.removeItem('orderBy'); // Xóa giá trị orderBy từ localStorage
            }

            if (page) {
                queryParams.push(`page=${page}`);
                savedPage = page; // Lưu giá trị page hiện tại
                localStorage.setItem('page', page); // Lưu giá trị page vào localStorage
            } else {
                savedPage = ''; // Reset giá trị page nếu không có giá trị
                localStorage.removeItem('page'); // Xóa giá trị page từ localStorage
            }

            if (fromDate) {
                queryParams.push(`fromdate=${fromDate}`);
                savedFromDate = fromDate; // Lưu giá trị fromDate hiện tại
                localStorage.setItem('fromDate', fromDate); // Lưu giá trị fromDate vào localStorage
            } else {
                savedFromDate = ''; // Reset giá trị fromDate nếu không có giá trị
                localStorage.removeItem('fromDate'); // Xóa giá trị fromDate từ localStorage
            }

            if (toDate) {
                queryParams.push(`todate=${toDate}`);
                savedToDate = toDate; // Lưu giá trị toDate hiện tại
                localStorage.setItem('toDate', toDate); // Lưu giá trị toDate vào localStorage
            } else {
                savedToDate = ''; // Reset giá trị toDate nếu không có giá trị
                localStorage.removeItem('toDate'); // Xóa giá trị toDate từ localStorage
            }

            const queryString = queryParams.join('&');
            const newUrl = `${baseUrl}?${queryString}`;

            // Chuyển hướng trình duyệt đến đường dẫn mới
            window.location.href = newUrl;
        }
    </script>
}


